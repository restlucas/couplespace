// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

datasource db {
  provider = "postgresql"
  url = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")

  // provider = "mysql"
  // url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                 String    @id @default(cuid())
  userId             String    @unique @map("user_id")
  type               String    @map("provider_type")  
  provider           String    @map("provider_id")  
  providerAccountId  String    @map("provider_account_id")
  refreshToken       String?   @db.Text
  accessToken        String?   @db.Text @map("access_token")
  accessTokenExpires DateTime?

  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt

  user               User      @relation(fields: [userId], references: [id])

  @@unique([provider, providerAccountId])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?   @db.Text
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  account       Account?
  couple        Couple?
  publications  Publication[]
}

model Page {
  id            String  @id @default(cuid())
  link          String?
  name          String
  about         String  @db.Text
  picture       String? @db.Text
  date          String

  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  publications  Publication[]
  pictures      Picture[]
  couple        Couple[]
}

enum CoupleType {
  OWNER
  PARTNER
}

model Couple {
  id            String  @id @default(cuid())
  pageId        String
  userId        String  @unique
  type          CoupleType @default(OWNER)

  page          Page    @relation(fields: [pageId], references: [id])
  user          User    @relation(fields: [userId], references: [id])
}

model Publication {
  id            String @id @default(cuid())
  pageId        String
  message       String @db.Text
  userId        String
  createdAt     DateTime  @default(now())

  page        Page    @relation(fields: [pageId], references: [id])
  user        User    @relation(fields: [userId], references: [id])
}

model Picture {
  id            String @id @default(cuid())
  url           String @db.Text
  name          String @db.Text
  pageId        String
  page          Page    @relation(fields: [pageId], references: [id])
}

model Invite {
  id         String   @id @default(cuid())  
  email      String   
  token      String   @unique  
  expiresAt  DateTime 
  createdAt  DateTime @default(now())
  accepted   Boolean  @default(false) 
}
